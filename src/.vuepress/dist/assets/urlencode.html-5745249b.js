import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,d as a}from"./app-72775176.js";const t={},i=a(`<h1 id="urlencode-编码" tabindex="-1"><a class="header-anchor" href="#urlencode-编码" aria-hidden="true">#</a> UrlEncode 编码</h1><p>默认情况下浏览器只能访问以下 响应头</p><ul><li>Cache-Control</li><li>Content-Language</li><li>Content-Type</li><li>Expires</li><li>Last-Modified</li><li>Pragma</li></ul><p>想让浏览器访问到其他响应头，</p><p>则需要在服务器上设置 <code>Access-Control-Expose-Headers</code></p><p><code>Access-Control-Expose-Headers : &#39;FileNName&#39;</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HttpContext.Response.Headers.Append(&quot;Access-Control-Expose-Headers&quot;, &quot;FileNName&quot;);
Response.Headers.Append(&quot;FileNName&quot;, &quot;666&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HttpContext.Response.Headers.Add(&quot;Access-Control-Expose-Headers&quot;, &quot;fileNName2&quot;);
Response.Headers.Add(&quot;fileNName2&quot;, &quot;666&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//Http报头中不能添加中文字符,否则报错，需要进行编码
//Response.ContentType = &quot;application/octet-stream&quot;;
Response.Headers.Append(&quot;Charset&quot;, &quot;utf-8&quot;);
Response.Headers.Append(&quot;Access-Control-Expose-Headers&quot;, &quot;FileName&quot;);
Response.Headers.Append(&quot;FileName&quot;, WebUtility.UrlEncode(fileName));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用UrlEncode 会出现空格变成加号，</p><p>解决：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Response.Headers.Append(&quot;Access-Control-Expose-Headers&quot;, &quot;FileName&quot;);
Response.Headers.Append(&quot;FileName&quot;, Uri.EscapeDataString(fileName));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpUtility.UrlEncode 会将空格转换为 + 号，而将 + 编码为 %2b。</p><p>HttpUtility.UrlPathEncode 会将空格转换为 %20 而保持 + 号不变。</p><p>Uri.EscapeDataString 既会编码 + 号也会编码空格。</p><p>Uri.EscapeUriString 已经废弃了，作用和 HttpUtility.UrlPathEncode 一样。</p><p>推荐使用： Uri.EscapeDataString</p><h2 id="js方面" tabindex="-1"><a class="header-anchor" href="#js方面" aria-hidden="true">#</a> js方面</h2><p>encodeURIComponent 和 decodeURIComponent 可以编码和解码URI特殊字符（如#，/，￥等），而decodeURI则不能。</p><p>axios:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),o=[i];function d(l,p){return s(),n("div",null,o)}const u=e(t,[["render",d],["__file","urlencode.html.vue"]]);export{u as default};
