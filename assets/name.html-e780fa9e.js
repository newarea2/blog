import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,b as n,d as t,f as a,a as e}from"./app-90f462c1.js";const i={},r=e('<h1 id="命名法" tabindex="-1"><a class="header-anchor" href="#命名法" aria-hidden="true">#</a> 命名法</h1><p>前端中有各种各样的命名法，如 JavaScript 中的变量一般使用驼峰命名法、类名使用帕斯卡命名法，文件夹名称有时使用中划线</p><table><thead><tr><th style="text-align:left;">命名法</th><th style="text-align:left;">英语</th><th style="text-align:left;">示例</th><th style="text-align:left;">使用场景</th></tr></thead><tbody><tr><td style="text-align:left;">驼峰</td><td style="text-align:left;">camelCase</td><td style="text-align:left;">fooBar</td><td style="text-align:left;">JS 变量名称</td></tr><tr><td style="text-align:left;">帕斯卡</td><td style="text-align:left;">PascalCase</td><td style="text-align:left;">FooBar</td><td style="text-align:left;">JS 类名</td></tr><tr><td style="text-align:left;">中划线</td><td style="text-align:left;">line-through、kebabCase</td><td style="text-align:left;">foo-bar</td><td style="text-align:left;">文件夹名称、CSS 类名</td></tr><tr><td style="text-align:left;">下划线</td><td style="text-align:left;">underline、underscore</td><td style="text-align:left;">foo_bar</td><td style="text-align:left;">CSS 类名</td></tr><tr><td style="text-align:left;">小写</td><td style="text-align:left;">lowercase</td><td style="text-align:left;">foo</td><td style="text-align:left;">JS 变量名由单个单词组成</td></tr><tr><td style="text-align:left;">大写</td><td style="text-align:left;">uppercase</td><td style="text-align:left;">FOO</td><td style="text-align:left;">JS 常量</td></tr><tr><td style="text-align:left;">首字母大写</td><td style="text-align:left;">capitalize</td><td style="text-align:left;">Foo</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="发音" tabindex="-1"><a class="header-anchor" href="#发音" aria-hidden="true">#</a> 发音</h2><p>camel [ˈkæml] 骆驼</p><p>kebab [kɪˈbæb] 烤肉串</p><h2 id="一些用于转换命名法的工具" tabindex="-1"><a class="header-anchor" href="#一些用于转换命名法的工具" aria-hidden="true">#</a> 一些用于转换命名法的工具</h2>',7),d={"fooBar:":"",true:""},u=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"包名"),n("th",{style:{"text-align":"left"}},"描述"),n("th",{style:{"text-align":"left"}},"示例")])],-1),k={style:{"text-align":"left"}},f={href:"https://github.com/samverschueren/uppercamelcase",target:"_blank",rel:"noopener noreferrer"},h=n("td",{style:{"text-align":"left"}},"将中划线/点/下划线/空格分隔的字符串转换为帕斯卡命名法",-1),g=n("td",{style:{"text-align":"left"}},"foo-bar → FooBar",-1),m={style:{"text-align":"left"}},x={href:"https://github.com/sindresorhus/camelcase",target:"_blank",rel:"noopener noreferrer"},_=n("td",{style:{"text-align":"left"}},"将中划线/点/下划线/空格分隔的字符串转换为帕斯卡命名法",-1),b=n("td",{style:{"text-align":"left"}},"foo-bar → FooBar",-1),y={style:{"text-align":"left"}},v={href:"https://github.com/sindresorhus/decamelize",target:"_blank",rel:"noopener noreferrer"},w=n("td",{style:{"text-align":"left"}},[t("使用"),n("strong",null,"自定义分隔符"),t("将驼峰字符串转换为小写字符串")],-1),C=n("td",{style:{"text-align":"left"}},"fooBar → foo-bar",-1),z={style:{"text-align":"left"}},B={href:"https://github.com/sindresorhus/titleize",target:"_blank",rel:"noopener noreferrer"},S=n("td",{style:{"text-align":"left"}},"将字符串中的每个单词首字母大写",-1),F=n("td",{style:{"text-align":"left"}},"foo bar → Foo Bar",-1),J={style:{"text-align":"left"}},N={href:"https://github.com/sindresorhus/humanize-string",target:"_blank",rel:"noopener noreferrer"},V=n("td",{style:{"text-align":"left"}},"将驼峰化/中划线/下划线字符串转换为人性化字符串",-1),E=n("td",{style:{"text-align":"left"}},"fooBar-Baz_Faz → Foo bar baz faz",-1),L={style:{"text-align":"left"}},W={href:"https://github.com/sindresorhus/camelcase-keys",target:"_blank",rel:"noopener noreferrer"},A=n("td",{style:{"text-align":"left"}},"将对象的key转化为驼峰命名法",-1),H=n("td",{style:{"text-align":"left"}},"{'foo-bar': true} →",-1),I=e(`<h2 id="手写转换方法" tabindex="-1"><a class="header-anchor" href="#手写转换方法" aria-hidden="true">#</a> 手写转换方法</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * camelCase(&#39;hello-world&#39;) // helloWorld
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">camelCase</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-(\\w)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * capitalize(&#39;hello&#39;) // Hello
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">capitalize</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * pascalCase(&#39;hello-world&#39;) // HelloWorld
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">pascalCase</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token function">camelCase</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * kebabCase(&#39;helloWorld&#39;) // hello-world
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">kebabCase</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; $1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function O(U,j){const s=o("ExternalLinkIcon");return p(),c("div",null,[r,n("table",d,[u,n("tbody",null,[n("tr",null,[n("td",k,[n("a",f,[t("uppercamelcase"),a(s)])]),h,g]),n("tr",null,[n("td",m,[n("a",x,[t("camelcase"),a(s)])]),_,b]),n("tr",null,[n("td",y,[n("a",v,[t("decamelize"),a(s)])]),w,C]),n("tr",null,[n("td",z,[n("a",B,[t("titleize"),a(s)])]),S,F]),n("tr",null,[n("td",J,[n("a",N,[t("humanize-string"),a(s)])]),V,E]),n("tr",null,[n("td",L,[n("a",W,[t("camelcase-keys"),a(s)])]),A,H])])]),I])}const Z=l(i,[["render",O],["__file","name.html.vue"]]);export{Z as default};
