import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,f as t,d as i}from"./app-f1b20077.js";const l={},u={href:"https://github.com/sindresorhus/execa",target:"_blank",rel:"noopener noreferrer"},r=i(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> execa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;execa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">execa</span><span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230719/15.png" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><p>execa(file, [arguments], [options])：执行一个文件，集成了 child_process.execFile 和 child_process.spawn 的功能。返回一个增强版的 child_process，增加了 stdout 和 stderr 属性。</p><p>execa.sync(file, [arguments], [options])：同步执行一个文件，返回值同 child_process.spawnSync，如果出错会抛出异常。</p><p>execa.stdout(file, [arguments], [options])：如果只想要 stdout，可以用这个方法替换 execa</p><p>execa.stderr(file, [arguments], [options])：如果只想要 stderr，可以用这个方法替换 execa</p><p>execa.shell(command, [options])：通过 shell 执行 command。同 execa，但推荐使用 execa，因为它更快更安全。</p><p>execa.shellSync(file, [options])：同步通过 shell 执行 command，返回值同 child_process.spawnSync。</p><h4 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h4><p>API 都接收 options 对象，支持以下属性：</p><p>cwd：string型，当前child_process的工作目录，默认为process.cwd()</p><p>env：object型，Environment 值，默认为p<wbr>rocess.env。不想要的话，将 extendEnv 设为 false</p><p>extendEnv：bool型，默认为true，见上</p><p>stdio：string数组，默认为pipe，stdio的配置项</p><p>stdin：string | number | Stream | undefined | null型，默认pipe。同stdio</p><p>stdout：string | number | Stream | undefined | null型，默认pipe。同stdio</p><p>stderr：string | number | Stream | undefined | null型，默认pipe。同stdio</p><p>uid：number型，进程的用户标识</p><p>gid：number型，进程的群组标识</p><p>argv0：string型，设置child_process的argv[0]。如果没有指定，默认为command或file</p><p>preferLocal：bool型，默认true。在寻找要执行的二进制文件时，首选本地安装的二进制文件，例如npm install foo, 可以execa(&#39;foo&#39;)</p><p>localDir：string型，默认process.cwd()。与preferLocal一起使用，首选查找本地安装的二进制文件的路径。</p><p>input：string | Buffer | stream.Readable型。将输入写入stdin。（当使用同步方法时，不能使用stream）</p><p>reject：bool型，默认true。设为false时，promise返回error，而不是rejecting</p><p>cleanup：bool型，默认true。跟踪生成的进程，并在父进程退出时杀死它。</p><p>detached：bool型，子进程独立于其父进程运行。具体的行为取决于平台。</p><p>killSignal：number型，默认SIGTERM。当生成的进程将被终止时，使用该信号</p><p>encoding：string | null型，默认utf8。指定stdout和stderr输出的字符编码。<br> 如果设置为null，stdout和stderr将是一个Buffer，而不是string</p><p>timeout：number型，默认为0。设置后，如果子进程运行超时，父进程将发送由killSignal属性标识的信号（默认为SIGTERM）</p><p>buffer：bool型，默认ture。缓冲进程的输出，<br> 当缓冲被禁用时，您必须消费stdout和stderr流的输出，因为在promise完成前，它们不会被resolved/rejected</p><p>maxBuffer：number型，默认10000000（10MB）。stdout或stderr上允许的最大字节数。</p><p>stripFinalNewline：bool型，默认true。删除输出最后的换行符。</p><p>shell：bool型，为true，则在shell中运行命令。在UNIX上使用/bin/sh，在Windows上使用cmd.exe。<br> 可以指定不同的shell。shell应该理解UNIX上的-c开关或Windows上的/d /s /c开关。默认false</p><p>windowsVerbatimArguments：bool型，默认false。如果为真，则在Windows上不需要引用或转义参数。在其他平台上被忽略。<br> 当shell选项为真时，它被自动设置为true。</p><p>本质上就是强化版的child_process，一些基本用法同node。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token comment">// 将 child_process 的 stdout 输出到主进程的 stdout</span>
<span class="token function">execa</span><span class="token punctuation">(</span><span class="token string">&#39;echo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;unicorns111&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// unicorns111</span>

    <span class="token comment">// Run a shell command</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>stdout<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">shell</span><span class="token punctuation">(</span><span class="token string">&#39;echo unicorns222&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>                                           <span class="token comment">// unicorns222</span>

    <span class="token comment">// Catching an error</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">shell</span><span class="token punctuation">(</span><span class="token string">&#39;exit 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// {</span>
        <span class="token comment">//     message: &#39;Command failed: /bin/sh -c exit 3&#39;</span>
        <span class="token comment">//     killed: false,</span>
        <span class="token comment">//     code: 3,</span>
        <span class="token comment">//     signal: null,</span>
        <span class="token comment">//     cmd: &#39;/bin/sh -c exit 3&#39;,</span>
        <span class="token comment">//     stdout: &#39;&#39;,</span>
        <span class="token comment">//     stderr: &#39;&#39;,</span>
        <span class="token comment">//     timedOut: false</span>
        <span class="token comment">// }</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如实时打印出子进程的信息，并作为变量保存下来：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> getStream <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;get-stream&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token function">execa</span><span class="token punctuation">(</span><span class="token string">&#39;echo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 实时输出 foo</span>

<span class="token function">getStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child output:&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// child output: foo</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),d={href:"https://zxljack.com/2019/02/execa/",target:"_blank",rel:"noopener noreferrer"};function k(m,v){const a=p("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[n("a",u,[s("execa"),t(a)]),s(" 是更好的子进程管理工具（A better child_process）。本质上就是衍生一个 shell，传入的 command 字符串在该 shell 中直接处理。")]),r,n("p",null,[n("a",d,[s("转载"),t(a)])])])}const f=e(l,[["render",k],["__file","exaca.html.vue"]]);export{f as default};
