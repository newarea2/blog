import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-f1b20077.js";const o={},p=e(`<h1 id="各种符号的作用" tabindex="-1"><a class="header-anchor" href="#各种符号的作用" aria-hidden="true">#</a> 各种符号的作用</h1><h2 id="_1-空值合并运算符" tabindex="-1"><a class="header-anchor" href="#_1-空值合并运算符" aria-hidden="true">#</a> 1 空值合并运算符 <code>??</code></h2><p>表示只有左侧的值为 <code>null</code> 或 <code>undefined</code> 的时候才使用右侧的值。和 <code>||</code> 作用类似，不同之处在于，<code>||</code> 表示左侧的值只要转为布尔值为 false 时，就取后面，否则取前面。</p><p>由此可以发现，双问号 <code>??</code> 更加适合在不知道变量是否定义时，或者是否赋值时的场景来使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token boolean">false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">??</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">??</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">??</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">??</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-可选链操作符" tabindex="-1"><a class="header-anchor" href="#_2-可选链操作符" aria-hidden="true">#</a> 2 可选链操作符 <code>?.</code></h2><p>功能类似于 <code>·</code> 链式操作符，不同之处在于，在引用为空（<code>null</code> 或者 <code>undefined</code>）的情况下不会引起错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">}</span>

<span class="token comment">// 下面写法会报错</span>
<span class="token comment">// console.log(info.parent.name)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>parent<span class="token operator">?.</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token comment">// 等价于</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>parent <span class="token operator">?</span> info<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-typescript-非空类型断言" tabindex="-1"><a class="header-anchor" href="#_3-typescript-非空类型断言" aria-hidden="true">#</a> 3 （TypeScript）非空类型断言 <code>!</code></h2><p>用于断言操作对象是非 null 和非 undefined 类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Params</span> <span class="token punctuation">{</span>
  x<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> y<span class="token operator">:</span> <span class="token builtin">number</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>params<span class="token operator">:</span> Params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 因为 x 类型是 number | undefined，而 y 类型是 number，所以下面语句，TS 会编译报错</span>
  <span class="token comment">// y = params.x</span>

  <span class="token comment">// 可以改成：</span>
  <span class="token comment">// y = params.x as number</span>

  <span class="token comment">// 或</span>
  y <span class="token operator">=</span> params<span class="token punctuation">.</span>x<span class="token operator">!</span>
  <span class="token keyword">return</span> y
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>message<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 报错 TS2532: Object is possibly &#39;undefined&#39;.</span>
  <span class="token comment">// console.log(message.length)</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">!</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),t=[p];function c(l,i){return s(),a("div",null,t)}const u=n(o,[["render",c],["__file","operator.html.vue"]]);export{u as default};
