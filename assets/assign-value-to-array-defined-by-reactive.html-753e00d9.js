import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-90f462c1.js";const p={},t=e(`<h1 id="如何对reactive定义的数组进行赋值" tabindex="-1"><a class="header-anchor" href="#如何对reactive定义的数组进行赋值" aria-hidden="true">#</a> 如何对reactive定义的数组进行赋值</h1><h2 id="_1-问题" tabindex="-1"><a class="header-anchor" href="#_1-问题" aria-hidden="true">#</a> 1 问题</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 方法一 失败</span>
  <span class="token comment">// arr = [4, 5, 6]</span>
  <span class="token comment">// console.log(arr) // 4 5 6</span>

  <span class="token comment">// 方法二 失败</span>
  arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面方法，虽然能正确打印出 <code>arr</code>，但页面视图并不会发送改变（假设视图使用了<code>arr</code>）。直接赋值（<code>arr = [4, 5, 6]</code>）会让 <code>arr</code> 失去响应式。</p><p><code>reactive</code> 方法将 target 对象生成一个 Proxy 代理对象，从而可以对操作 target 对象属性的一些行为进行拦截。直接赋值使 <code>arr</code> 由 Proxy 对象变成普通对象，从而实去拦截、代理功能。</p><p>同理，对 reactive 定义的对象也不能直接进行赋值，</p><p>就像 Commonjs 中模块导出 <code>var exports = module.exports</code>，可以对 <code>module.exports</code> 进行赋值，但是不能对 <code>exports</code> 赋值，只能通过 <code>.</code> 操作符添加属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>

<span class="token comment">// module.exports = {</span>
<span class="token comment">//   a,</span>
<span class="token comment">//   b</span>
<span class="token comment">// }</span>

<span class="token comment">// 错误，赋值前 exports 引用地址和 module.exports 相同，赋值后 exports 指向一个新地址，</span>
<span class="token comment">// 本来 exports 只是相当于 module.exports 的别名，赋值后 exports 跟 module.exports 没关系了</span>
exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">,</span>
  b
<span class="token punctuation">}</span>

<span class="token comment">// 正确</span>
exports<span class="token punctuation">.</span>b <span class="token operator">=</span> b
exports<span class="token punctuation">.</span>a <span class="token operator">=</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-解决办法" tabindex="-1"><a class="header-anchor" href="#_2-解决办法" aria-hidden="true">#</a> 2 解决办法</h2><p>方法一 通过 reactive 创建一个响应式对象，对象的属性是数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二 使用 ref</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐使用方法一，平时开发时，最好将组件中所有状态都作为一个对象的属性，然后用 reactive 包裹这个对象（如下），这样做的好处有：</p><ul><li>所有状态数据写在一个地方，便于管理、查找。</li><li>解决了本文中所描述的问题，即可以对状态直接赋值而不用担心视图不变化。</li></ul><p>这样做的缺点是，对于组合式API语法糖写法（<code>&lt;script setup&gt;</code>），如果想在模板中使用状态，都必须得带上<code>state.</code>，多写了些代码，有点麻烦。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","assign-value-to-array-defined-by-reactive.html.vue"]]);export{d as default};
