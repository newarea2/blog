import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as a,f as e,d as t}from"./app-f1b20077.js";const r={},l=n("h1",{id:"number数字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#number数字","aria-hidden":"true"},"#"),a(" Number数字")],-1),u=n("h2",{id:"_1-number-、parseint-和-parsefloat-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-number-、parseint-和-parsefloat-的区别","aria-hidden":"true"},"#"),a(" 1 Number()、parseInt() 和 parseFloat() 的区别")],-1),d=n("p",null,"parseInt、parseFloat是直接定义在全局对象window下的",-1),k={href:"https://www.cnblogs.com/Juphy/p/7085197.html",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="_1-1-number" tabindex="-1"><a class="header-anchor" href="#_1-1-number" aria-hidden="true">#</a> 1.1 Number()</h3><h3 id="_1-2-parseint" tabindex="-1"><a class="header-anchor" href="#_1-2-parseint" aria-hidden="true">#</a> 1.2 parseInt()</h3><p>语法：<br> parseInt(string, radix)</p><p>string 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</p><p>radix 表示上述字符串的基数。比如参数&quot;10&quot;表示使用我们通常使用的十进制数值系统。始终指定此参数可以消除阅读该代码时的困惑并且保证转换结果可预测。当未指定基数时，不同的实现会产生不同的结果，通常将值默认为10。</p><p>返回值：<br> 返回解析后的整数值。 如果被解析参数的第一个字符无法被转化成数值类型，则返回 NaN。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">// 表示15是16进制数，返回10进制数21 =&gt; 1*16 + 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-parsefloat" tabindex="-1"><a class="header-anchor" href="#_1-3-parsefloat" aria-hidden="true">#</a> 1.3 parseFloat()</h3><ul><li><p>将字符串转换为数字（浮点数，如果有小数则不会去掉小数）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;100.58&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 100.58</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>去掉小数后无用的零</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;100.5800&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 100.58</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul>`,9),v={href:"https://www.cnblogs.com/yi0921/p/6196841.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="_2-number-prototype-tofixed" tabindex="-1"><a class="header-anchor" href="#_2-number-prototype-tofixed" aria-hidden="true">#</a> 2 Number.prototype.toFixed()</h2><p>使用定点表示法来格式化一个数，会用到四舍五入。</p><p>注意在使用 toFixed 前，一定要将目标数据转换为Number类型，否则会报错，所以使用前最好先转换为Number。但是该方法的返回值是字符串形式</p><p>语法：<br><code>numObj.toFixed(digits)</code> digits 表示小数点后数字的个数，如果忽略该参数，则默认为0</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&#39;1.234&#39;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: s.toFixed is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">financial</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 里面的 parseFloat 作用是将 x 变成数字类型，防止 x 为字符串，直接调用 toFixed 报错。toFixed 的返回值是字符串，外面的 parseFloat 作用是将字符串变成数字类型，同时去掉小数据点后无用的零</span>
  <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token function">financial</span><span class="token punctuation">(</span><span class="token number">2.3456</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 2.35</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n<span class="token punctuation">)</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-两个字符串变量通过比较运算符比较大小时需注意" tabindex="-1"><a class="header-anchor" href="#_3-两个字符串变量通过比较运算符比较大小时需注意" aria-hidden="true">#</a> 3 两个字符串变量通过比较运算符比较大小时需注意</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;50&#39;</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">&#39;100&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;50&#39;</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">&#39;100&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function h(g,f){const s=o("ExternalLinkIcon");return c(),i("div",null,[l,u,d,n("p",null,[n("a",k,[a("参考"),e(s)])]),m,n("p",null,[n("a",v,[a("链接"),e(s)])]),b])}const j=p(r,[["render",h],["__file","number.html.vue"]]);export{j as default};
