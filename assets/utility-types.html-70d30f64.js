import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-90f462c1.js";const t={},p=e(`<h1 id="工具类型" tabindex="-1"><a class="header-anchor" href="#工具类型" aria-hidden="true">#</a> 工具类型</h1><p>TS在全局内置了很多<code>Utility Types</code>，来对已有类型做一些处理，然后获得我们想要的新类型:</p><p><code>type --&gt; [type utils] --&gt; newType</code></p><h2 id="_1-partial-type" tabindex="-1"><a class="header-anchor" href="#_1-partial-type" aria-hidden="true">#</a> 1 <code>Partial&lt;Type&gt;</code></h2><p>作用：它会将<code>Type</code>内所有属性置为可选，返回一个给定类型<code>Type</code>的子集。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> string<span class="token punctuation">;</span>
  description<span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 场景：只想更新toTo部分属性，Partial的使用就比较优雅了</span>
<span class="token keyword">function</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">todo</span><span class="token operator">:</span> Todo<span class="token punctuation">,</span> fieldsToUpdate<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token operator">...</span>fieldsToUpdate <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> todo1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;organize desk&quot;</span><span class="token punctuation">,</span>
  description<span class="token operator">:</span> <span class="token string">&quot;clear clutter&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todo2 <span class="token operator">=</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo1<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  description<span class="token operator">:</span> <span class="token string">&quot;throw out trash&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看看<code>Partial</code>背后是如何实现的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Make all properties in T optional
 */</span>
type Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义涉及的知识点：</p><ul><li><p>泛型<code>&lt;T&gt;</code></p></li><li><p><code>keyof</code>运算符：获取T的所有键</p></li><li><p><code>[P in keyof T]</code>：遍历T的所有key，映射类型、索引签名</p></li><li><p><code>?</code>：可选</p></li></ul><h2 id="_2-required-type" tabindex="-1"><a class="header-anchor" href="#_2-required-type" aria-hidden="true">#</a> 2 <code>Required&lt;Type&gt;</code></h2><p>作用：<code>Required</code>与上面的<code>Partial</code>相反，构建返回一个<code>Type</code>的所有属性为必选的新类型。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  a<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  b<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj<span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj2<span class="token operator">:</span> Required<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Property &#39;b&#39; is missing in type &#39;{ a: number; }&#39; but required in type &#39;Required&lt;Props&gt;&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看看<code>Required</code>背后的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Make all properties in T required
 */</span>
type Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义涉及的知识点：</p><p>在TS2.8版本改善了对映射类型修饰符的支持。</p><p>在TS2.8版本之前，支持对映射类型的属性添加<code>readonly</code>、<code>?</code>的修饰符，但是并没有提供移除修饰符的能力。默认它的修饰符是跟映射类型保持一致的，有兴趣的可以看这个PR以及它fix的issue。那现在映射类型它支持通过<code>+</code>或者<code>-</code>来添加or移除<code>readonly</code>或者<code>?</code>修饰符。</p><p>我们看一个示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span> readonly a<span class="token operator">?</span> <span class="token operator">:</span> number<span class="token punctuation">,</span> b<span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span>
type MockRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">-</span>readonly <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token comment">// 这里可以不需要-?</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> test<span class="token operator">:</span> MockRequired<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">//  我希望a是必须的</span>
    a<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token string">&#39;b&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

test<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 我希望可以修改a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里我们就理解<code>-?</code>的含义了。</p><h2 id="_3-readonly-type" tabindex="-1"><a class="header-anchor" href="#_3-readonly-type" aria-hidden="true">#</a> 3 <code>Readonly&lt;Type&gt;</code></h2><p>作用：将<code>Type</code>所有属性置为只读。示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;Delete inactive users&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

todo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Cannot assign to &#39;title&#39; because it is a read-only property.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看看<code>Readonly</code>背后的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Make all properties in T readonly
 */</span>
type Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    readonly <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有上面的知识铺垫就比较好理解了，只需要知道映射类型支持修饰符<code>readonly</code>、<code>?</code>。</p><p>另外这里补充下<code>readonly</code>的含义跟JS的<code>const</code>不能修改的含义一样，指的是不能重写(重写赋值)。</p><p>这个方法对于<code>Object.freeze</code>的定义非常适用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> freeze<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-record-keys-type" tabindex="-1"><a class="header-anchor" href="#_4-record-keys-type" aria-hidden="true">#</a> 4 <code>Record&lt;Keys,Type&gt;</code></h2><p>作用：构建一个对象类型，该对象类型的<code>key</code>来自<code>Keys</code>，并且其<code>key</code>对应的<code>value</code>是<code>Type</code>。所以这个方法非常适用于将一个类型的属性映射到另外一个类型。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">CatInfo</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> number<span class="token punctuation">;</span>
  breed<span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type CatName <span class="token operator">=</span> <span class="token string">&quot;miffy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;boris&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;mordred&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cats<span class="token operator">:</span> Record<span class="token operator">&lt;</span>CatName<span class="token punctuation">,</span> CatInfo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  miffy<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;Persian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  boris<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;Maine Coon&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mordred<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;British Shorthair&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

cats<span class="token punctuation">.</span>boris<span class="token punctuation">;</span> <span class="token comment">// (property) boris: CatInfo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看看<code>Record</code>背后定义。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Construct a type with a set of properties K of type T
 */</span>
type Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> any<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面涉及的新的知识点：<code>keyof any</code>。</p><p>我们先看一段代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> keyof any<span class="token punctuation">;</span>

type EqualA <span class="token operator">=</span> string <span class="token operator">|</span> number <span class="token operator">|</span> symbol<span class="token punctuation">;</span> <span class="token comment">// A其实等价于EqualA</span>

type Is <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">EqualA</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> is<span class="token operator">:</span> Is <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// Type &#39;false&#39; is not assignable to type &#39;true&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此如果我们这样使用就会提示报错了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">CatInfo</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> number<span class="token punctuation">;</span>
  breed<span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type CatName <span class="token operator">=</span> <span class="token string">&quot;miffy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;boris&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;mordred&quot;</span> <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false导致</span>

<span class="token keyword">const</span> cats<span class="token operator">:</span> Record<span class="token operator">&lt;</span>CatName<span class="token punctuation">,</span> CatInfo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// Error: Type &#39;string | boolean&#39; does not satisfy the constraint &#39;string | number | symbol&#39;. Type &#39;boolean&#39; is not assignable to type &#39;string | number | symbol&#39;.</span>
  miffy<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;Persian&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  boris<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;Maine Coon&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mordred<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> breed<span class="token operator">:</span> <span class="token string">&quot;British Shorthair&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-pick-type-keys" tabindex="-1"><a class="header-anchor" href="#_5-pick-type-keys" aria-hidden="true">#</a> 5 <code>Pick&lt;Type, Keys&gt;</code></h2><p><code>Keys</code>的类型有要求：<code>string literal or union of string literals</code>。</p><p>作用：构建返回一个根据<code>Keys</code>从类型<code>Type</code>拣选所需的属性的新类型。</p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> string<span class="token punctuation">;</span>
  description<span class="token operator">:</span> string<span class="token punctuation">;</span>
  completed<span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type TodoPreview <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;completed&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 只需要Keys: title and completed</span>
  title<span class="token operator">:</span> <span class="token string">&quot;Clean room&quot;</span><span class="token punctuation">,</span>
  completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

todo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样我们看看其背后的实现：这里就没有新的知识点了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * From T, pick a set of properties whose keys are in the union K
 */</span>
type Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-omit-type-keys" tabindex="-1"><a class="header-anchor" href="#_6-omit-type-keys" aria-hidden="true">#</a> 6 <code>Omit&lt;Type, Keys&gt;</code></h2><p>这里就不重复介绍，可以看我之前文章：TypeScript学习之Omit。</p><h2 id="_7-exclude-type-excludedunion" tabindex="-1"><a class="header-anchor" href="#_7-exclude-type-excludedunion" aria-hidden="true">#</a> 7 <code>Exclude&lt;Type, ExcludedUnion&gt;</code></h2><p>作用：从<code>Type</code>中排除可以分配给<code>ExcludedUnion</code>的类型。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type <span class="token constant">T0</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T0 = &quot;b&quot; | &quot;c&quot;</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// type T1 = &quot;c&quot;</span>
type <span class="token constant">T2</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>string <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Function<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T2 = string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看看<code>Exclude</code>背后的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Exclude from T those types that are assignable to U
 */</span>
type Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> never <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>涉及知识点：</p><p><code>T extends U ? never : T</code>这里的<code>extends</code>可与<code>class的extends</code>不是一回事，这里指的是条件类型。这里不做过多的扩展，重点通过一个概念<strong>分布式条件类型</strong>来理解上面<code>Exclude</code>的写法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>
type <span class="token constant">B</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>

type <span class="token constant">C</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;b&#39; | &#39;c&#39;;</span>

<span class="token comment">// A extends B ? never : A 等价于 (&#39;a&#39; | &#39;b&#39; | &#39;c&#39;) extends B ? never : (&#39;a&#39; | &#39;b&#39; | &#39;c&#39;) 等价于如下</span>
type <span class="token constant">D</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token operator">?</span> never <span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token operator">?</span> never <span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token operator">?</span> never <span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;b&#39; | &#39;c&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-extract-type-union" tabindex="-1"><a class="header-anchor" href="#_8-extract-type-union" aria-hidden="true">#</a> 8 <code>Extract&lt;Type, Union&gt;</code></h2><p>作用：从<code>Type</code>中检出可以分配给<code>Union</code>的类型。示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type <span class="token constant">T0</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;f&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T0 = &quot;a&quot;</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span>string <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Function<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T1 = () =&gt; void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看看<code>Extract</code>背后的定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Extract from T those types that are assignable to U
 */</span>
type Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> never<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有你阔以看到<code>Extract</code>就是跟<code>Exclude</code>取反的区别。</p><h2 id="_9-nonnullable-type" tabindex="-1"><a class="header-anchor" href="#_9-nonnullable-type" aria-hidden="true">#</a> 9 <code>NonNullable&lt;Type&gt;</code></h2><p>作用：排除类型<code>Type</code>中的<code>null</code>、<code>undefined</code>。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type <span class="token constant">T0</span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span>string <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T0 = string | number</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token comment">// type T1 = string[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>看看<code>NonNullable</code>的定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Exclude null and undefined from T
 */</span>
type NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> never <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到其实还是上面分布式条件类型<code>extends</code>的运用。</p><h2 id="_10-parameters-type" tabindex="-1"><a class="header-anchor" href="#_10-parameters-type" aria-hidden="true">#</a> 10 <code>Parameters&lt;Type&gt;</code></h2><p>作用：基于类型<code>Type</code>的参数构建一个新的元组类型。示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>declare <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> number<span class="token punctuation">;</span> b<span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

type <span class="token constant">T0</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T0 = []</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">s</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T1 = [s: string]</span>
type <span class="token constant">T2</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T2 = [arg: unknown]</span>
type <span class="token constant">T3</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f1<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// type T3 = [arg: {</span>
<span class="token comment">//     a: number;</span>
<span class="token comment">//     b: string;</span>
<span class="token comment">// }]</span>
type <span class="token constant">T4</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T4 = unknown[]</span>
type <span class="token constant">T5</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>never<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T5 = never</span>
type <span class="token constant">T6</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;. type T6 = never</span>
type <span class="token constant">T7</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>Function<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) =&gt; any&#39;.</span>
<span class="token comment">//   Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.</span>

<span class="token comment">// type T7 = never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再看看<code>Parameters</code>背后实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Obtain the parameters of a function type in a tuple
 */</span>
type Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> never<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>涉及知识点：</p><p><code>T extends (...args: any) =&gt; any</code>定义了<code>Parameters</code>的泛型约束，兼容目前所有函数的类型定义。<code>infer P</code>：用于表示待推断的函数参数。</p><p><code>T extends (...args: infer P) =&gt; any ? P : never</code>：表示如果 <code>T</code> 能赋值给 <code>(...args: infer P) =&gt; any</code>，则结果是 <code>(...args: infer P) =&gt; any</code>类型中的参数为 <code>P</code>，否则返回为 <code>never</code>。</p><p>关于<code>info</code>更多学习推荐深入理解typescript-info。</p><h2 id="_11-constructorparameters-type" tabindex="-1"><a class="header-anchor" href="#_11-constructorparameters-type" aria-hidden="true">#</a> 11 <code>ConstructorParameters&lt;Type&gt;</code></h2><p>作用：从构造函数类型 <code>Type</code> 的参数类型构造元组或数组类型（如果 <code>Type</code> 不是函数，则为 <code>never</code>）。示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type <span class="token constant">T0</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>ErrorConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T0 = [message?: string]</span>
type <span class="token constant">T1</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>FunctionConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T1 = string[]</span>
type <span class="token constant">T2</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>RegExpConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T2 = [pattern: string | RegExp, flags?: string]</span>
type <span class="token constant">T3</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T3 = unknown[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看其<code>ConstructorParameters</code>定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Obtain the parameters of a constructor function type in a tuple
 */</span>
type ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> never<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ConstructorParameters</code>跟<code>Parameters</code>的定义几乎一样，区别在于前者是表达构造函数签名的定义。</p><p>常见的构造函数类型签名有：基于<code>Type</code>或者<code>Interface</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type SomeConstructor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> SomeObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">ctor</span><span class="token operator">:</span> SomeConstructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">CallOrConstruct</span> <span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>
  <span class="token punctuation">(</span>n<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-returntype-type" tabindex="-1"><a class="header-anchor" href="#_12-returntype-type" aria-hidden="true">#</a> 12 <code>ReturnType&lt;Type&gt;</code></h2><p>作用：基于函数<code>Type</code>的返回值类型创建一个新类型。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>declare <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> number<span class="token punctuation">;</span> b<span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span>

type <span class="token constant">T0</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T0 = string</span>
type <span class="token constant">T4</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f1<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// type T4 = {</span>
<span class="token comment">//     a: number;</span>
<span class="token comment">//     b: string;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Obtain the return type of a function type
 */</span>
type ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> any<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到其原理跟前几个差不多，区别在于<code>infer</code>推断的位置不同。</p><h2 id="_13-instancetype-type" tabindex="-1"><a class="header-anchor" href="#_13-instancetype-type" aria-hidden="true">#</a> 13 <code>InstanceType&lt;Type&gt;</code></h2><p>作用：基于函数类型<code>Type</code>的<code>constructor</code>的类型构造一个新类型。示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type <span class="token constant">T0</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T0 = C</span>

type <span class="token constant">T1</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T1 = any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Obtain the return type of a constructor function type
 */</span>
type InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">abstract</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> any<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过对比发现：<code>InstanceType</code> 与 <code>ReturnType</code> 的区别是它多了函数构造签名定义，与 <code>ConstructorParameters</code> 的区别是它推断的不是参数类型，而是返回值类型。</p><h2 id="_14-thisparametertype-type" tabindex="-1"><a class="header-anchor" href="#_14-thisparametertype-type" aria-hidden="true">#</a> 14 <code>ThisParameterType&lt;Type&gt;</code></h2><p>作用：获取函数类型<code>Type</code>中的<code>this</code>类型。如果没有返回<code>unknown</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">numberToString</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> ThisParameterType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// n: number</span>
  <span class="token keyword">return</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Extracts the type of the &#39;this&#39; parameter of a function type, or &#39;unknown&#39; if the function type has no &#39;this&#39; parameter.
 */</span>
type ThisParameterType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> infer <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> unknown<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想了解如何在函数中定义<code>this</code>，建议还是看官网。</p><h2 id="_15-omitthisparameter-type" tabindex="-1"><a class="header-anchor" href="#_15-omitthisparameter-type" aria-hidden="true">#</a> 15 <code>OmitThisParameter&lt;Type&gt;</code></h2><p>作用：移除函数类型<code>Type</code>中参数的<code>this</code>。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> fiveToHex<span class="token operator">:</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">toHex</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// const fiveToHex: () =&gt; string</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fiveToHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Removes the &#39;this&#39; parameter from a function type.
 */</span>
type OmitThisParameter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> unknown <span class="token keyword">extends</span> <span class="token class-name">ThisParameterType</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>unknown extends ThisParameterType&lt;T&gt;</code>：如果<code>T</code>函数参数中没有<code>this</code>，则直接返回<code>T</code>。否则，<code>T extends (...args: infer A) =&gt; infer R ? (...args: A) =&gt; R : T;</code>，如果<code>T</code>是后者的子类型，那么返回新的函数，函数参数为推导的<code>infer A</code>，返回值为<code>infer R</code>。否则返回<code>T</code>。</p>`,117),o=[p];function c(l,r){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","utility-types.html.vue"]]);export{u as default};
