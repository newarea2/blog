import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,b as n,d as a,f as c,a as r}from"./app-90f462c1.js";const i={},l=n("h1",{id:"继承与原型链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#继承与原型链","aria-hidden":"true"},"#"),a(" 继承与原型链")],-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"},u=r(`<p>这篇文章很详细，有几个重点如下：</p><h2 id="_1-重要概念" tabindex="-1"><a class="header-anchor" href="#_1-重要概念" aria-hidden="true">#</a> 1 重要概念</h2><p>每个实例对象都有一个私有属性（称之为 <code>__proto__</code>）指向它的构造函数的原型对象（prototype）。该原型对象也有自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为null。根据定义，null没有原型，并作为这个原型链中的最后一个环境。</p><p>可以这样理解，每一个对象都有一个父对象，父对象也有它自己的父对象，最顶层的父对象是null。类似Java中类、父类、父类的父类。</p><p>父对象是什么意思呢？即以这个父对象为“模子”来创建子对象，如父对象 fatherObj 是<code>{a: 1, b: 2}</code>，那么子对象 subObj 也具备属性a、b。</p><p>如何表示一个对象的父对象呢？用<code>__proto__</code>表示，即<code>subObj.__proto__</code>。</p><h2 id="_2-画原型链" tabindex="-1"><a class="header-anchor" href="#_2-画原型链" aria-hidden="true">#</a> 2 画原型链</h2><p>当访问一个对象的属性时，会自底向上遍历原型链查找属性，如果能找到，返回结果，停止遍历，找不到，返回undefined</p><p>例子一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>o</code> ---&gt; <code>Object.prototype</code> ---&gt; <code>null</code><br><code>o</code> ---&gt; <code>o.__proto__</code> ---&gt; <code>null</code></p><p>例子二：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Cat</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;eat fish&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;小白&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cat</code> ---&gt; <code>Cat.prototype</code> ---&gt; <code>Object.prototype</code> ---&gt; <code>null</code><br><code>cat</code> ---&gt; <code>cat.__proto__</code> ---&gt; <code>cat.__proto__.__proto__</code> ---&gt; <code>null</code></p><p>即：</p><p>{name: &#39;小白&#39;} ---&gt; {eat: ..., constructor: ...} ---&gt; {hasOwnProperty: ...} ---&gt; null</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230730/01.png" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><p>例子三：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;yo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;whadup&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组都继承于 Array.prototype，其中包含 indexOf, forEach 等方法，原型链如下</p><p>a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</p><p>例子四：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数都继承于 Function.prototype，其中都包含 call, bind等方法，原型链如下</p><p>f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</p>`,25);function k(_,v){const s=t("ExternalLinkIcon");return o(),p("div",null,[l,n("p",null,[n("a",d,[a("继承与原型链"),c(s)])]),u])}const b=e(i,[["render",k],["__file","inheritance-and-prototype-chain.html.vue"]]);export{b as default};
