import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c,b as n,d as i,f as o,a as s}from"./app-90f462c1.js";const l={},r=s(`<h1 id="note" tabindex="-1"><a class="header-anchor" href="#note" aria-hidden="true">#</a> note</h1><h2 id="_1-实际问题" tabindex="-1"><a class="header-anchor" href="#_1-实际问题" aria-hidden="true">#</a> 1 实际问题</h2><p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <code>&lt;script&gt;</code> 标签引入 jQuery，然后就可以使用全局变量 $ 或 jQuery 了。如果直接这样使用会报错，因为 TypeScript 编译上下文并不知道 jQuery 是什么。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ERROR: Cannot find name &#39;jQuery&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有如下几种解决方式：</p><h3 id="_1-1-方式一" tabindex="-1"><a class="header-anchor" href="#_1-1-方式一" aria-hidden="true">#</a> 1.1 方式一</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 源文件</span>
<span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 编译后</span>
<span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错虽然解决了，但是重新定义了变量 jQuery，导致无法使用 jQuery 库。</p><h3 id="_1-2-方式二" tabindex="-1"><a class="header-anchor" href="#_1-2-方式二" aria-hidden="true">#</a> 1.2 方式二</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 源文件</span>
<span class="token keyword">var</span> <span class="token function-variable function">jQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 编译后</span>
<span class="token keyword">var</span> jQuery<span class="token punctuation">;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式其实跟方式一是相似的，只是方式一中使用的是函数定义，这里使用的是函数表达式。为了跟方式三形成对比，这里只是定义了变量 jQuery 但没有赋值。</p><h3 id="_1-3-方式三" tabindex="-1"><a class="header-anchor" href="#_1-3-方式三" aria-hidden="true">#</a> 1.3 方式三</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 源文件</span>
<span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token function-variable function">jQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 编译后</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，这种方式既解决了报错问题，也不会向编译后的文件中添加多余的代码。</p><p><code>declare var</code> 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，<strong>仅仅会用于编译时的检查，在编译结果中会被删除</strong>。</p><p>通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中，这就是声明文件。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token function-variable function">jQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，声明语句中只能定义类型，切勿在声明语句中定义具体的实现</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token function-variable function">jQuery</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ERROR: An implementation cannot be declared in ambient contexts.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>declare namespace 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。</p><h2 id="_2-declare" tabindex="-1"><a class="header-anchor" href="#_2-declare" aria-hidden="true">#</a> 2 declare</h2><p>declare 关键字告诉 TypeScript，你正在试图表述一个其他地方已经存在的代码。如</p><p>错误：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>foo <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// Cannot find name &#39;foo&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正确：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">var</span> foo<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token comment">// 告诉 TypeScript 编译器，如果再次遇到 foo，foo是一个类型为 any 的变量。</span>
foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就有点像 JS 中的变量先声明再赋值。</p><p>可以选择把这些声明放入 .ts 或者 .d.ts 里。在你实际的项目里，我们强烈建议你应该把声明放入独立的 .d.ts</p><h2 id="xxx-d-ts-xxx-js-等价于-一个-xxx-ts-文件" tabindex="-1"><a class="header-anchor" href="#xxx-d-ts-xxx-js-等价于-一个-xxx-ts-文件" aria-hidden="true">#</a> xxx.d.ts + xxx.js 等价于 一个 xxx.ts 文件</h2><p>类型声明文件（xxx.d.ts）通常和 js 文件一起出现</p>`,33),d={href:"https://www.dengwb.com/typescript/project/declaration-files.html#%E5%85%A8%E5%B1%80%E7%B1%BB%E5%BA%93",target:"_blank",rel:"noopener noreferrer"},u=s(`<p>一般发布到 npm 上的库都是 js 文件，所以要有一个相应的类型声明文件，对js进行解释（类型申明），这个类型什么文件要么是跟库一起的，要么是在 @types 下的。</p><p>在一个 ts 文件中</p><p>1</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span>
a  <span class="token operator">=</span> <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span>
a  <span class="token operator">=</span> <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10);function k(v,m){const a=t("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[n("a",d,[i("全局类库"),o(a)])]),u])}const y=e(l,[["render",k],["__file","declare.html.vue"]]);export{y as default};
