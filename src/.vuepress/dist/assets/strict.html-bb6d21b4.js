import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,a as s,b as n,f as i,d as a}from"./app-72775176.js";const l={},r=a(`<h1 id="strict" tabindex="-1"><a class="header-anchor" href="#strict" aria-hidden="true">#</a> strict</h1><p>通过 <code>tsc --init</code> 生成的配置文件 tsconfig.json 中默认开启了严格模式 <code>&quot;strict&quot;: true</code></p><p>严格模式会启用下面8个编译选项：</p><ul><li>alwaysStrict</li><li>strictBindCallApply</li><li>strictFunctionTypes</li><li>strictNullChecks</li><li>strictPropertyInitialization</li><li>noImplicitAny</li><li>noImplicitThis</li><li>useUnknownInCatchVariables</li></ul><p>上面选项，当 <code>strict</code> 开启情况下默认值为 <code>true</code>，否则默认值 <code>false</code>。每个通过 <code>strict</code> 开启的选项都可以被单独设置。如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;noImplicit&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未来的 Typescript 版本可能会添加更多的类型检查选项到这个集合中。这意味着你不用跟踪每一次的 Typescript 发布使得你的项目能启用新的严格检查相关的选项。如果新的选项被添加到上面的集合中，只要升级了你项目的 Typescript 版本它们就会被自动激活。</p><h2 id="_1-alwaysstrict" tabindex="-1"><a class="header-anchor" href="#_1-alwaysstrict" aria-hidden="true">#</a> 1 alwaysStrict</h2><blockquote><p>总是生成 <code>&quot;use strict&quot;</code>。</p></blockquote>`,9),u=s("code",null,'"use strict"',-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode",target:"_blank",rel:"noopener noreferrer"},k=a(`<h2 id="_2-strictbindcallapply" tabindex="-1"><a class="header-anchor" href="#_2-strictbindcallapply" aria-hidden="true">#</a> 2 strictBindCallApply</h2><p>当使用 <code>call</code>、<code>bind</code>、<code>apply</code> 调用函数时，提供正确的类型检查。</p><p>如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">const</span> n2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未开启 <code>strictBindCallApply</code>，以上代码编译时不报错，但在运行时会报错。</p><p>开启后，TypeScript 会报错 <code>Argument of type &#39;boolean&#39; is not assignable to parameter of type &#39;string&#39;.</code>。</p><h2 id="_3-strictfunctiontypes" tabindex="-1"><a class="header-anchor" href="#_3-strictfunctiontypes" aria-hidden="true">#</a> 3 strictFunctionTypes</h2><p>对函数参数类型严格把控。</p><p>如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">type</span> <span class="token class-name">StringOrNumberFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ns<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
 
<span class="token keyword">let</span> func<span class="token operator">:</span> StringOrNumberFunc <span class="token operator">=</span> fn<span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未开启 <code>strictFunctionTypes</code>，以上代码编译时不报错，但在运行时会报错。</p><p>开启后，TypeScript 会报错。</p><h2 id="_4-strictnullchecks" tabindex="-1"><a class="header-anchor" href="#_4-strictnullchecks" aria-hidden="true">#</a> 4 strictNullChecks</h2><p>未开启 <code>strictNullChecks</code> 时，可以将 <code>null</code>、<code>undefined</code> 赋值给 <code>number</code>、<code>string</code> 类型的变量，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> userName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
userName <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token keyword">const</span> chars <span class="token operator">=</span> userName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用值为 <code>null</code>、<code>undefined</code> 的变量时容易引起“空指针”问题，以上代码编译时不报错，但在运行时会报错：<code>Uncaught TypeError: Cannot read properties of undefined (reading &#39;split&#39;)</code></p><p>开启后，以上代码会报错：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> userName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
userName <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 不能将类型“undefined”分配给类型“string”。ts(2322)</span>
userName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-strictpropertyinitialization" tabindex="-1"><a class="header-anchor" href="#_5-strictpropertyinitialization" aria-hidden="true">#</a> 5 strictPropertyInitialization</h2><p>开启后，TypeScript 会检查<strong>类</strong>属性是否需要初始化(可以理解为初始值)，当需要初始化的属性未初始化时，抛出错误，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">UserAccount</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  accountType <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// error，email未初始化</span>
  address<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>name 明确初始化</li><li>accountType 已初始赋值（默认值）</li><li>email 没有初始值，会抛出错误</li><li>address 声明了 undefined 类型，也就意味着不需要初始赋值</li></ul><h2 id="_6-noimplicitany" tabindex="-1"><a class="header-anchor" href="#_6-noimplicitany" aria-hidden="true">#</a> 6 noImplicitAny</h2><blockquote><p>禁止隐式的 <code>any</code> 类型。</p></blockquote><p>在有些情况下，当一个变量没有类型注解（显示指定类型），也无法根据类型推断准确推断出类型，此时变量类型将被推断为 <code>any</code>，这可能会导致一些错误，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">subtr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未开启 <code>noImplicitAn</code>，以上代码编译时不报错，但在运行时会报错。</p><p>开启后，当变量类型推断为 <code>any</code> 时，TypeScript 会报错。</p><h2 id="_7-noimplicitthis" tabindex="-1"><a class="header-anchor" href="#_7-noimplicitthis" aria-hidden="true">#</a> 7 noImplicitThis</h2><h2 id="_8-useunknownincatchvariables" tabindex="-1"><a class="header-anchor" href="#_8-useunknownincatchvariables" aria-hidden="true">#</a> 8 useUnknownInCatchVariables</h2><p><code>try/catch</code> 中 <code>catch</code> 块的参数默认类型为 <code>any</code>, 当在代码块中使用参数时不会抛出任何问题，即潜在的的问题不会在编译期暴露出来，就会导致运行时错误。 当设置为 <code>true</code> 时，TypeScript 会将 <code>catch</code> 块中的参数类型设置为 <code>unknown</code>, 从而迫使用户增加类型约束，保证代码正确运行。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未开启 <code>useUnknownInCatchVariables</code>，上述代码编译不报错，但运行时会报错。</p><p>开启后，编译报错 <code>e 的类型是 unknown</code>。</p>`,34);function v(m,b){const e=p("ExternalLinkIcon");return c(),o("div",null,[r,s("p",null,[n("在编译后的 js 文件头部生成 "),u,n("，开启 ES5 的"),s("a",d,[n("严格模式|MDN"),i(e)]),n("。")]),k])}const f=t(l,[["render",v],["__file","strict.html.vue"]]);export{f as default};
