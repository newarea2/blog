import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,f as e,d as t}from"./app-72775176.js";const l={},u=t(`<h1 id="模块系统" tabindex="-1"><a class="header-anchor" href="#模块系统" aria-hidden="true">#</a> 模块系统</h1><h2 id="export-type" tabindex="-1"><a class="header-anchor" href="#export-type" aria-hidden="true">#</a> export type</h2><p><code>export =</code> 是 TS 为了兼容 AMD 规范和 commonjs 规范而创立的新语法，<strong>用于模块导出单一的值（也可以叫做整体导出）</strong>。</p><p>当使用 <code>export =</code> 来导出时，必须使用 <code>import = require()</code> 来导入。</p><p>该语法不常用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// foo.ts</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token operator">=</span> add<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> add <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./foo&#39;</span><span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-commonjs" tabindex="-1"><a class="header-anchor" href="#_1-commonjs" aria-hidden="true">#</a> 1 commonjs</h3><p>设置 <code>&quot;module&quot;: &quot;commonjs&quot;</code>，编译结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// foo.js</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> add<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>__esModule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-amd" tabindex="-1"><a class="header-anchor" href="#_2-amd" aria-hidden="true">#</a> 2 amd</h3><p>设置 <code>&quot;module&quot;: &quot;amd&quot;</code>，编译结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;require&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exports&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> add<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;require&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exports&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> add</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    exports<span class="token punctuation">.</span>__esModule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-esnext" tabindex="-1"><a class="header-anchor" href="#_3-esnext" aria-hidden="true">#</a> 3 esnext</h3><p>设置 &quot;module&quot;: &quot;exnext&quot;，TS 报错，提示信息如下：</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230530/01.png" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230530/02.png" alt="02" tabindex="0" loading="lazy"><figcaption>02</figcaption></figure><h2 id="export" tabindex="-1"><a class="header-anchor" href="#export" aria-hidden="true">#</a> export {}</h2><p>在默认情况下，当你开始在一个新的 TypeScript 文件中写下代码时，它处于全局命名空间中，要想快速将一个全局命名空间变成一个模块，在文件中添加 <code>export {}</code> 即可。</p><h2 id="export-1" tabindex="-1"><a class="header-anchor" href="#export-1" aria-hidden="true">#</a> export =</h2>`,22),r={href:"https://segmentfault.com/a/1190000039800522?utm_source=tag-newest",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[s("TS 中不仅可以导入导出值，还可以导入导出类型。如 TS 中类、枚举既可以表示类型，也可以表示值，使用 "),n("code",null,"import type"),s(" 可以确切的表示导入的类型还是值。")],-1),m=n("p",null,[s("此外 TS 扩展了 "),n("code",null,"import"),s(" 语法")],-1),v={id:"_1-import-type",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_1-import-type","aria-hidden":"true"},"#",-1),h={href:"https://www.typescriptlang.org/docs/handbook/2/modules.html#import-type",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>用于导入类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// @filename: animal.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createCatName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;fluffy&quot;</span>

<span class="token comment">// @filename: app.ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> createCatName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./animal.js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),f={id:"内联类型导入",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#内联类型导入","aria-hidden":"true"},"#",-1),x={href:"https://www.typescriptlang.org/docs/handbook/2/modules.html#inline-type-imports",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>TypeScript 4.5 还允许单个导入以 type 为前缀，以指示导入的引用是一种类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// @filename: app.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createCatName<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Cat</span><span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Dog</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./animal.js&quot;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Animals</span> <span class="token operator">=</span> Cat <span class="token operator">|</span> Dog<span class="token punctuation">;</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">createCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function q(w,j){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[s("你不知道的 「 import type 」"),e(a)])]),n("p",null,[n("a",d,[s("Type-Only Imports and Export"),e(a)])]),k,m,n("h3",v,[b,s(" 1 "),n("a",h,[s("import type"),e(a)])]),g,n("h4",f,[y,s(),n("a",x,[s("内联类型导入"),e(a)])]),_])}const S=p(l,[["render",q],["__file","module.html.vue"]]);export{S as default};
