import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as s,c as t,a as o,b as e,f as c,d as l}from"./app-72775176.js";const a={},n=o("h1",{id:"moduleresolution",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#moduleresolution","aria-hidden":"true"},"#"),e(" moduleResolution")],-1),m={href:"https://www.typescriptlang.org/docs/handbook/module-resolution.html",target:"_blank",rel:"noopener noreferrer"},h=l('<p>当 <code>module</code> 为 <code>commonjs</code> 默认值是 <code>node</code><br> 其他情况默认值是 <code>classic</code></p><p>这里存在两种截然不同的模块：</p><ul><li>相对模块路径（路径以 <code>.</code> 开头，例如：<code>./someFile</code> 或者 <code>../../someFolder/someFile</code> 等）；</li><li>其他动态查找模块（如：<code>core-js</code>，<code>typestyle</code>，<code>react</code> 或者甚至是 <code>react/core</code> 等）。</li></ul><h2 id="_1-相对模块路径" tabindex="-1"><a class="header-anchor" href="#_1-相对模块路径" aria-hidden="true">#</a> 1 相对模块路径</h2><p>这很简单，仅仅是按照相对路径来就可以了：</p><ul><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;./foo&#39;</code>，那么 <code>foo</code> 文件必须与 <code>bar.ts</code> 文件存在于相同的文件夹下</li><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;../foo&#39;</code>，那么 <code>foo</code> 文件所存在的地方必须是 <code>bar.ts</code> 的上一级目录</li><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;../someFolder/foo&#39;</code>，那么 <code>foo</code> 文件所在的文件夹 <code>someFolder</code> 必须与 <code>bar.ts</code> 文件所在文件夹在相同的目录下</li></ul><p>你还可以思考一下其他相对路径导入的场景。😃</p><h2 id="_2-动态查找" tabindex="-1"><a class="header-anchor" href="#_2-动态查找" aria-hidden="true">#</a> 2 动态查找</h2>',8),u={href:"https://nodejs.org/api/modules.html#modules_all_together",target:"_blank",rel:"noopener noreferrer"},f=l('<ul><li>当你使用 <code>import * as foo from &#39;foo&#39;</code>，将会按如下顺序查找模块： <ul><li><code>./node_modules/foo</code></li><li><code>../node_modules/foo</code></li><li><code>../../node_modules/foo</code></li><li>直到系统的根目录</li></ul></li><li>当你使用 <code>import * as foo from &#39;something/foo&#39;</code>，将会按照如下顺序查找内容 <ul><li><code>./node_modules/something/foo</code></li><li><code>../node_modules/something/foo</code></li><li><code>../../node_modules/something/foo</code></li><li>直到系统的根目录</li></ul></li></ul><p>相关配置：<code>moduleResolution</code></p><p>相同代码，配置的 <code>moduleResolution</code> 不同，模块解析策略也不同</p><h3 id="_2-1-classic" tabindex="-1"><a class="header-anchor" href="#_2-1-classic" aria-hidden="true">#</a> 2.1 classic</h3><h3 id="_2-2-node" tabindex="-1"><a class="header-anchor" href="#_2-2-node" aria-hidden="true">#</a> 2.2 node</h3>',5);function _(p,b){const d=i("ExternalLinkIcon");return s(),t("div",null,[n,o("p",null,[o("a",m,[e("Module Resolution|TypeScript"),c(d)])]),h,o("p",null,[e("当导入路径不是相对路径时，模块解析将会模仿 "),o("a",u,[e("Node 模块解析策略"),c(d)]),e("，下面我将给出一个简单例子：")]),f])}const k=r(a,[["render",_],["__file","moduleResolution.html.vue"]]);export{k as default};
