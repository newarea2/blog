import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,b as n,d as s,f as t,a as e}from"./app-90f462c1.js";const l={},u=e('<h1 id="你还在重复的搬砖-写个-cli-工具解放你的双手吧-动态生成代码模板" tabindex="-1"><a class="header-anchor" href="#你还在重复的搬砖-写个-cli-工具解放你的双手吧-动态生成代码模板" aria-hidden="true">#</a> 你还在重复的搬砖！？写个 cli 工具解放你的双手吧 - 动态生成代码模板</h1><h2 id="why" tabindex="-1"><a class="header-anchor" href="#why" aria-hidden="true">#</a> why</h2><p>在我平时的授课工作里面，需要频繁的创建 koa 项目来教学演示，demo 项目之间还需要添加不同的中间件</p><p>比如：</p><ul><li>项目 a 需要 koa-router、koa-static ，</li><li>项目 b 需要 koa-router、koa-body、koa-views</li></ul><p>那每次都需要去敲重复的代码，这不符合我的风格呀，作为务实的程序员一定要具备自动化思维。</p><p>分析下我们的问题场景，其实每次都是重复的几个步骤，而计算机对于重复的劳动可是最擅长的。</p><p>所以必须敲个工具来解决创建 koa 的问题</p><blockquote><p>思考：在你平时的工作里面有没有这种重复劳动的问题场景呢？</p></blockquote>',9),r=n("strong",null,"视频教程",-1),d={href:"https://www.bilibili.com/video/BV1jK4y197Ne",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="what" tabindex="-1"><a class="header-anchor" href="#what" aria-hidden="true">#</a> what</h2><p>那我们的这个工具应该做成什么样子呢？</p><p>想一想我们平时用到的 vue-cli 工具，是不是和我们这里的问题场景很类似呢？</p><p>创建 vue 项目是不是一个重复的问题，它和我们创建 koa 项目本质上是一样的问题</p><p>所以我们的工具就可以设计成和 vue-cli 工具那样，通过在终端执行，可以和用户做交互，然后基于用户的选择来自动生成对应的 koa 项目模板</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230719/pic_014.gif" alt="2021-06-25 11_22_19.gif" tabindex="0" loading="lazy"><figcaption>2021-06-25 11_22_19.gif</figcaption></figure><blockquote><p>在我们去使用社区里面优秀工具的时候，除了使用层面，还应该去吸收它解决问题的思想</p></blockquote><h2 id="how" tabindex="-1"><a class="header-anchor" href="#how" aria-hidden="true">#</a> how</h2><p>我们已经定义完问题了，也明确了问题用什么形式来解决了，接下来就是撸起袖子开干啦</p><p>下面我将会以问题的形式来驱动出整个 cli 工具的实现</p><blockquote><p>编程就是一个解决问题的过程</p></blockquote><h3 id="主流程" tabindex="-1"><a class="header-anchor" href="#主流程" aria-hidden="true">#</a> 主流程</h3><p>首先我们需要先明确出整个程序的主流程</p><p>其实很简单，就是把我们之前手动创建 koa 的过程给自动化</p><p>我们先看看手动是需要几个步骤</p><ol><li>先创建一个项目（也就是创建文件夹）</li><li>在创建 index.js 程序入口文件 <ul><li>编写对应的 koa 代码</li></ul></li><li>接着创建 package.json (也有可能是用 npm init 来生成的) <ul><li>编写对应的 package.json 的配置</li></ul></li><li>安装依赖</li></ol><p>那怎么自动化呢？其实就是把上面的过程翻译成代码呗</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 创建项目文件夹</span>
fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 创建 index.js</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 创建 package.json</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/package.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token string">&quot;package&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4. 安装依赖</span>
<span class="token constant">TODO</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里直接使用 fs 创建对应的文件夹、index.js、package.json 文件就可以了</p><p>最后一步给了一个 TODO, 是因为我们的 package.json 的内容还没有定义好，所以也安装不了依赖，等到我们解决了 package.json 内容的问题后，在来处理这个点。</p><p>好，到目前为止，我们程序的主流程就已经定义好了</p><p>接下来就是一个逐步完善的过程了</p><h3 id="如何生成代码模板" tabindex="-1"><a class="header-anchor" href="#如何生成代码模板" aria-hidden="true">#</a> 如何生成代码模板</h3><p>index.js 和 package.json 其实都是代码模板，我们只需要基于动态的数据生成就可以了</p>`,24),m={href:"https://www.npmjs.com/package/ejs",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>createIndexTemplate.js 模块的职责就是基于 template/index.ejs 来生成 index.js 的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// template/index.ejs</span>
<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">.</span>router<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa-router&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>

<span class="token operator">...</span><span class="token operator">...</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">%=</span> port <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;open server localhost:&lt;%= port %&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// createIndexTemplate.js</span>
<span class="token keyword">import</span> ejs <span class="token keyword">from</span> <span class="token string">&quot;ejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> templateCode <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>
    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../template/index.ejs&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ejs<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">middleware</span><span class="token operator">:</span> config<span class="token punctuation">.</span>middleware<span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> config<span class="token punctuation">.</span>port<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这里的 config 是需要基于用户来生成的</p><p>并且这里简单的设计了一下数据结构，比如里面必须要有个 middleware 对象来表示用户需要的 koa 中间件，比如还有 port 来表示用户希望的端口号</p><p>而 packege.json 代码生成的过程和 index.js 很类似，还是基于 config 来决定是否安装其对应的依赖</p>`,6),g={href:"https://github.com/cuixiaorui/teach-koa-setup/blob/main/bin/template/package.ejs",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/cuixiaorui/teach-koa-setup/blob/main/bin/createPackageTemplate.js",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.bilibili.com/video/BV1WK4y1A7EE",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"如何执行安装命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何执行安装命令","aria-hidden":"true"},"#"),s(" 如何执行安装命令")],-1),y=n("p",null,"到这里，我们的 package.json 就已经处理完成了，那是时候执行安装命令了",-1),w=n("p",null,"想一想平时我们是如何执行安装命令的？是不是执行 npm install 或者 yarn 呀",-1),j={href:"http://nodejs.cn/api/child_process.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.npmjs.com/package/execa",target:"_blank",rel:"noopener noreferrer"},_=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token operator">...</span><span class="token operator">...</span>
<span class="token comment">// 4. 安装依赖</span>
<span class="token function">execa</span><span class="token punctuation">(</span><span class="token string">&quot;yarn&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">cwd</span><span class="token operator">:</span> <span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里肯定有同学会问，这里的 stdio:[2,2,2] 是什么鬼，其实 2 代表的是 &#39;inherit&#39; ，他可以控制通过相应的标准输入输出流传入/传出父进程。</p><blockquote><p>那为什么我们需要设置它呢？ 这个我在视频里面有详细的演示，感兴趣的话可以好好看看视频</p></blockquote><h3 id="如何实现命令行的用户交互" tabindex="-1"><a class="header-anchor" href="#如何实现命令行的用户交互" aria-hidden="true">#</a> 如何实现命令行的用户交互</h3><p>到目前为止，我们的程序的主流程总算是搞定了，接着我们只需要获取用户的输入，然后基于用户的输入来决定代码的行为就可以了</p><p>那么我们怎么实现像 vue-cli 那样的用户交互形式呢？</p>`,6),x={href:"https://www.npmjs.com/package/inquirer",target:"_blank",rel:"noopener noreferrer"},N=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// questions/index.js</span>

<span class="token keyword">import</span> inquirer <span class="token keyword">from</span> <span class="token string">&quot;inquirer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> packageName <span class="token keyword">from</span> <span class="token string">&quot;./packageName.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> port <span class="token keyword">from</span> <span class="token string">&quot;./port.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> middleware <span class="token keyword">from</span> <span class="token string">&quot;./middleware.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token comment">/* Pass your questions in here */</span>
    <span class="token function">packageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">middleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .packageName.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;packageName&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;set package name&quot;</span><span class="token punctuation">,</span>
    <span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Please enter package name&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./port.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;port&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;set server port number&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">8000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./middleware.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;checkbox&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;select middleware&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;middleware&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">choices</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;koaRouter&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;koaStatic&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;koaViews&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;koaBody&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>packageName.js、port.js、middleware.js 其实就是对 inquirer 定义问题配置的封装，在实现代码的时候，不光要实现功能，还需要考虑到维护性以及代码的可读性，遵守单一职责，时时刻刻对代码进行重构</p><p>最后我们在 index.js 进行对 questions/index.js 的调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> questions <span class="token keyword">from</span> <span class="token string">&quot;./questions/index.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./config.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">questions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">createConfig</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 config 就是基于用户的选项来生成的配置，不过这里还会涉及到另外一个组织代码的方式，就是需要把程序的主逻辑和程序的输入和输出分离。</p><p>因为输入和输出总是会容易变化的，而在我们的这个小程序里面我们把主逻辑和输出绑定在了一起（这里的输出就是 fs 模块，创建文件夹和文件），因为基于实际的情况的话我们的输出是不容易变化的</p><p>但是输出就不一样了，有可能是基于 inquirer.js ，也有可能改天就换个库，或者基于 GUI 的方式来调用，所以我们这里把输入抽离出来，主逻辑只依赖 config ，而我们需要对输入得到的 answer 对象做适配处理，这个其实就是适配层</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createConfig</span><span class="token punctuation">(</span><span class="token parameter">answer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 适配器</span>
  <span class="token keyword">const</span> <span class="token function-variable function">haveMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> answer<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> inputConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">packageName</span><span class="token operator">:</span> answer<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> answer<span class="token punctuation">.</span>port<span class="token punctuation">,</span>
    <span class="token literal-property property">middleware</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">static</span><span class="token operator">:</span> <span class="token function">haveMiddleware</span><span class="token punctuation">(</span><span class="token string">&quot;koaStatic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">views</span><span class="token operator">:</span> <span class="token function">haveMiddleware</span><span class="token punctuation">(</span><span class="token string">&quot;koaViews&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">router</span><span class="token operator">:</span> <span class="token function">haveMiddleware</span><span class="token punctuation">(</span><span class="token string">&quot;koaRouter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token function">haveMiddleware</span><span class="token punctuation">(</span><span class="token string">&quot;koaBody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> inputConfig<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后得到主程序依赖的数据结构，这个程序的逻辑基本就已经搞定了</p><h3 id="如何通过-cli-的方式调用" tabindex="-1"><a class="header-anchor" href="#如何通过-cli-的方式调用" aria-hidden="true">#</a> 如何通过 cli 的方式调用</h3><p>那我们想让用户通过 cli 的方式调用的话，还应该做什么事呢？</p><p>还需要处理2个事</p><ol><li>在 package.json 里面配置 bin 字段，然后创建 bin 文件夹，把之前所有的代码都放到 bin 文件夹内</li><li>在 bin/index.js 文件夹的头部写上以下注释</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bin/index.js</span>
#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，在执行这个脚本的时候，操作系统就会调用 node 来执行了</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230719/pic_015.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,19),P={href:"https://github.com/cuixiaorui/teach-koa-setup",target:"_blank",rel:"noopener noreferrer"},T=e(`<h3 id="如何调试" tabindex="-1"><a class="header-anchor" href="#如何调试" aria-hidden="true">#</a> 如何调试</h3><p>我们在本地调用 node bin/index.js 执行起来肯定是没有任何问题了，但是我们这个程序到时候是需要让用户通过 cli 直接执行的，那我们怎么可以模拟一下测试一下呢？</p><p>我们只需要在当前的这个项目路径下，执行 npm link 即可</p><p>npm 会帮助我们把这个项目链接到 root 下，可以执行 npm root -g 来查看</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230719/pic_016.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230719/pic_017.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>teach-setup-koa 通过软连接的方式指向了你的代码库</p></blockquote><p>然后我们就可以像调用全局的 cli 命令一样来调用自己的这个库了</p><p>比如说，你在 package.json 里面 name 是 teach-setup-koa , 那么在你执行完 npm link 后，就可以在终端执行 teach-setup-koa 命令了</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230719/pic_018.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>一般这一步骤会帮助我们看看有没有路径引入的错误</p><h3 id="如何分享到社区内给别人也使用" tabindex="-1"><a class="header-anchor" href="#如何分享到社区内给别人也使用" aria-hidden="true">#</a> 如何分享到社区内给别人也使用</h3><p>辛辛苦苦做完的程序，光自己用肯定不行，必须 show 出来，让同事让其他的小伙伴也都用上，那怎么办呢？</p><p>我们只要把程序发布到 npm 上就可以啦。</p><p>而发布到 npm 也很简单，只需要执行:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 先登录
<span class="token function">npm</span> login

// 在发布
<span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果你只是为了测试，希望你发布完可以把包删除掉 npm unpublish --force</p></blockquote><h3 id="如何美化输出" tabindex="-1"><a class="header-anchor" href="#如何美化输出" aria-hidden="true">#</a> 如何美化输出</h3><p>让程序跑起来是第一步，第二步的时候就需要对其做点小优化，比如可以在 run 到每一步骤的时候给予用户提示</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230719/pic_019.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,20),V={href:"https://www.npmjs.com/package/chalk",target:"_blank",rel:"noopener noreferrer"},B=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> chalk <span class="token keyword">from</span> <span class="token string">&#39;chalk&#39;</span>

<span class="token comment">// // 1. 创建项目文件夹</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">创建项目文件夹:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>packageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 创建 index.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">创建 index.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 3. 创建 package.json</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">创建 package.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 4. 安装依赖</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">安装依赖</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何格式化代码" tabindex="-1"><a class="header-anchor" href="#如何格式化代码" aria-hidden="true">#</a> 如何格式化代码</h3><p>如果你现在打开我们生成的代码的话，你会发现 index.js 和 package.json 代码格式都是乱的，比如含有很多的空格</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230719/pic_020.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>大家可以想想平时是用得什么来格式化代码的，是不是用过 prettier</p><p>而 prettier 是有 api 的调用方式的，所以就可以通过 prettier 来格式化代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// createPackageTempalte.js</span>
<span class="token keyword">import</span> prettier <span class="token keyword">from</span> <span class="token string">&quot;prettier&quot;</span>
<span class="token operator">...</span><span class="token operator">...</span>
<span class="token keyword">return</span> prettier<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后调用 prettier.format 来格式化代码，这样你在去看看生成的 package.json 你会发现空格已经没有啦。</p><blockquote><p>index.js 的代码格式也同样使用 prettier 来解决</p></blockquote><h3 id="如何测试" tabindex="-1"><a class="header-anchor" href="#如何测试" aria-hidden="true">#</a> 如何测试</h3><p>一个合格的开源项目其实是必须要有测试的，这样用户使用起来到会放心，而我们今天设计的程序是没有测试的，至于为什么，其实是因为我偷懒了(：逃</p><p>测试是一个比较大的话题，这个有机会在和大家系统的分享</p>`,12),C={href:"https://space.bilibili.com/175301983",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),S=n("p",null,"基于工作中实际的问题场景出发，定制解决方案，然后一步一步实现，其实这里想分享给大家的不只是程序实现的过程，还有这种自动化思维，如何利用程序来帮助我们提高效率。希望可以帮助到大家",-1),z={href:"https://www.bilibili.com/video/BV1jK4y197Ne",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,"最后祝大家工作多多摸鱼，拒绝 996",-1),I=n("h2",{id:"资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#资料","aria-hidden":"true"},"#"),s(" 资料")],-1),K={href:"https://github.com/cuixiaorui/teach-koa-setup",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.bilibili.com/video/BV1jK4y197Ne",target:"_blank",rel:"noopener noreferrer"},O=n("br",null,null,-1),L={href:"https://juejin.cn/post/6977567286013984776%5C",target:"_blank",rel:"noopener noreferrer"},F=n("br",null,null,-1),U=n("br",null,null,-1);function $(D,A){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("本教程配备了完整的"),r,s("，可点击观看:"),n("a",d,[s("编写基于 nodejs 的 cli 工具 - 动态生成代码模板"),t(a)])])]),k,n("p",null,[s("而在模板技术选型上，我选择了 "),n("strong",null,[n("a",m,[s("ejs"),t(a)])]),s(" ，当然你也可以使用你熟悉的或者你喜欢的库来生成")]),v,n("p",null,[s("大家可以参考 github 中 "),n("a",g,[s("template/package.ejs"),t(a)]),s(" 和 "),n("a",b,[s("createPackageTemplate.js"),t(a)]),s(" 的逻辑实现")]),n("blockquote",null,[n("p",null,[s("这里的 __dirname 的获取是涉及到了在 nodejs 中使用 esm 模块的知识点，具体可参考"),n("a",h,[s("如何在 nodejs 中使用 esm 模块规范"),t(a)])])]),f,y,w,n("p",null,[s("我们这里也一样，只需要执行命令即可，那执行命令可以用 nodejs 的内置模块 "),n("a",j,[s("child_process"),t(a)])]),n("p",null,[s("而我更喜欢用社区里的 "),n("a",q,[s("execa"),t(a)]),s("，原因就是因为它的 api 更友好，好了，上代码")]),_,n("p",null,[s("答案就是 "),n("a",x,[s("inquirer"),t(a)]),s(" 库，通过这个库就可以实现 vue-cli 那样的效果了，而其实 vue-cli 就是用得 inquirer")]),N,n("blockquote",null,[n("p",null,[s("具体的代码目录结构可参考"),n("a",P,[s("代码库"),t(a)])])]),T,n("p",null,[s("怎么可以做到呢？ 可以使用 "),n("a",V,[s("chalk"),t(a)]),s(" 这个库，来给我们的 console.log 加点颜色")]),B,n("blockquote",null,[n("p",null,[s("可以关注我的掘金号和"),n("a",C,[s("b站"),t(a)]),s("哦")])]),R,S,n("p",null,[s("对于程序来讲，最重要的是程序实现背后的思考过程，而因为受限于文字的表述方式，一些细节不能很好的表达出来，比如说重构代码、编程小技巧等，所以我还准备了视频版本，大家可以基于"),n("a",z,[s("视频"),t(a)]),s("来看看一个程序是如何从零到有的。")]),E,I,n("ul",null,[n("li",null,[s("这个 cli 工具的代码全部开源来供大家学习: "),n("a",K,[s("teach-setup-koa"),t(a)])]),n("li",null,[s("还提供了"),n("a",M,[s("视频版本"),t(a)]),s(",录制了整个编写的过程")])]),n("p",null,[s("作者：阿崔cxr"),O,s(" 链接："),n("a",L,[s("https://juejin.cn/post/6977567286013984776\\"),t(a)]),F,s(" 来源：掘金"),U,s(" 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])}const H=p(l,[["render",$],["__file","cli01.html.vue"]]);export{H as default};
