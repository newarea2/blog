import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-72775176.js";const p={},t=e(`<h1 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h1><blockquote><p>基于服务端、桌面端的模块化</p></blockquote><p>在早期，对于运行在浏览器端的 <code>JavaScript</code> 代码，模块化的需求并不那么的强烈，反而是偏向 服务端、桌面端的应用对模块化有迫切的需求（相对来说，服务端、桌面端程序的代码和需求要复杂一些）。<code>CommonJS</code> 规范就是一套偏向服务端的模块化规范，它为非浏览器端的模块化实现制定了一些的方案和标准，<code>NodeJS</code> 就采用了这个规范。</p><h2 id="_1-独立模块作用域" tabindex="-1"><a class="header-anchor" href="#_1-独立模块作用域" aria-hidden="true">#</a> 1 独立模块作用域</h2><p>一个文件就是模块，拥有独立的作用域</p><h2 id="_2-导出模块内部数据" tabindex="-1"><a class="header-anchor" href="#_2-导出模块内部数据" aria-hidden="true">#</a> 2 导出模块内部数据</h2><h3 id="_2-1-常规导出" tabindex="-1"><a class="header-anchor" href="#_2-1-常规导出" aria-hidden="true">#</a> 2.1 常规导出</h3><p>通过 <code>module.exports</code> 或 <code>exports</code> 对象导出模块内部数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> a<span class="token punctuation">,</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span> b
<span class="token punctuation">}</span>
<span class="token comment">// or</span>
exports<span class="token punctuation">.</span>x <span class="token operator">=</span> a<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>y <span class="token operator">=</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-导出单一的值-整体导出" tabindex="-1"><a class="header-anchor" href="#_2-2-导出单一的值-整体导出" aria-hidden="true">#</a> 2.2 导出单一的值（整体导出）</h3><p>如果一个模块的对外接口，就是一个单一的值，不能使用exports输出，只能使用module.exports输出。</p><p>foo.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 不能这样写</span>
<span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>index.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./foo&#39;</span><span class="token punctuation">)</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-exports-说明" tabindex="-1"><a class="header-anchor" href="#_2-3-exports-说明" aria-hidden="true">#</a> 2.3 exports 说明</h3><p>为了方便，Node为每个模块提供一个exports变量，指向module.exports。这等同在每个模块头部，有一行这样的命令。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这样的写法是无效的，因为exports不再指向module.exports了。下面的写法也是无效的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，hello函数是无法对外输出的，因为module.exports被重新赋值了。</p><h2 id="_3-导入外部模块数据" tabindex="-1"><a class="header-anchor" href="#_3-导入外部模块数据" aria-hidden="true">#</a> 3 导入外部模块数据</h2><p>通过 <code>require</code> 函数导入外部模块数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// b.js</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
a<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","commonjs.html.vue"]]);export{d as default};
