import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,d as e}from"./app-f1b20077.js";const t={},i=e(`<h2 id="传参" tabindex="-1"><a class="header-anchor" href="#传参" aria-hidden="true">#</a> 传参</h2><h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data</h3><p>axios中规定了&#39;PUT&#39;, &#39;POST&#39;, 和 &#39;PATCH&#39;传参是通过如下方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// 在没有设置 \`transformRequest\` 时，value必须是以下类型之一：</span>
  <span class="token comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>
  <span class="token comment">// - 浏览器专属：FormData, File, Blob</span>
  <span class="token comment">// - Node 专属： Stream</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>平时value的值多是对象，其实也可以是数组等，如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="params" tabindex="-1"><a class="header-anchor" href="#params" aria-hidden="true">#</a> params</h3><p>get请求通过<code>params</code>来传参</p><p>规定&#39;get&#39;传参是通过如下方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求头 content-type 默认是 &#39;application/json; charset=utf-8&#39;</p><h2 id="封装axios" tabindex="-1"><a class="header-anchor" href="#封装axios" aria-hidden="true">#</a> 封装axios</h2><p>封装axios的目的主要是以下几点</p><ul><li>在每个请求请求头设置 token（登录请求除外）</li><li>在每个请求之前开始 loading，在请求结束后结束 loading</li><li>axios get 和 post 请求等请求方式的传参形式不同，封装可以统一传参形式</li><li><strong>如果请求发生错误（有两类错误：1 http状态码status非2xx类错误；2 http状态码status为2xx，但是返回数据code不是success或者00之类标识）</strong></li><li>请求成功时，结果 response 是一个对象，属性包含 config、data等，而主要使用的是其中的 data，封装可以减少重复操作</li></ul>`,14),p=[i];function r(l,o){return s(),n("div",null,p)}const u=a(t,[["render",r],["__file","axios.html.vue"]]);export{u as default};
