import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as c,c as o,d as i}from"./app-72775176.js";const a={},t=i('<h1 id="ref和reactive的区别" tabindex="-1"><a class="header-anchor" href="#ref和reactive的区别" aria-hidden="true">#</a> ref和reactive的区别</h1><p>大家都知道 vue3 在9月18号晚上发布了，在 vue3 中对响应式数据的声明官方给出了 <code>ref()</code> 和 <code>reactive()</code> 这两种方式，今天我们来聊聊两种定义定义数据方式有什么不同</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230830/pic_014.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上代码，我们使用变量声明的方式，ref的方式，reactive的方式定义的三个变量，num1，num2，num3</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230830/pic_015.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们发现使用 <code>ref</code> 定义的数据，打印结果是一个被对象包裹的响应的数据，使用 <code>reactive</code> 的方式和纯变量声明的方式打印结果是一样的，这是什么原因呢?</p><p>我们发现在控制台输出一个警告信息， 提示 100 这个值不能被 <code>reactive</code> 创建，官方也推荐我们在定义数据的时候，<code>reactive</code> 定义复杂的数据类型的数据，<code>ref</code> 推荐定义基本数据类型，所以如果要使用 <code>reactive</code> 定义基本数据类型的话，我们需要在 <code>reactive</code> 中将数据包装一下</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230830/pic_016.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230830/pic_017.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们在使用 <code>reactive</code> 定义数据的时候用对象做一层包裹，这样控制台就不会报警告信息了，</p><p>但是使用 <code>reactive</code> 定义的数据和ref定义的数据打印结果有一些差异</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230830/pic_018.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230830/pic_019.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们发现ref定义的数据打印结果需要.value才能获取到结果，而reactive则不需要</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230830/pic_020.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>总结:</p><p><code>reactive</code> 和 <code>ref</code> 都是用来定义响应式数据的 <code>reactive</code> 更推荐去定义复杂的数据类型 <code>ref</code> 更推荐定义基本类型</p><p><code>ref</code> 和 <code>reactive</code> 本质我们可以简单的理解为 <code>ref</code> 是对<code>reactive</code> 的二次包装， <code>ref</code> 定义的数据访问的时候要多一个 <code>.value</code></p><p>使用 <code>ref</code> 定义基本数据类型，<code>ref</code> 也可以定义数组和对象</p>',19),d=[t];function n(r,p){return c(),o("div",null,d)}const l=e(a,[["render",n],["__file","difference-between-ref-and-reactive.html.vue"]]);export{l as default};
