import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,a as n,b as a,f as t,d as l}from"./app-72775176.js";const c={},u=n("h1",{id:"vue3-不同构建版本的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue3-不同构建版本的区别","aria-hidden":"true"},"#"),a(" Vue3 不同构建版本的区别")],-1),r={href:"https://v3.cn.vuejs.org/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A",target:"_blank",rel:"noopener noreferrer"},d={href:"https://cdn.jsdelivr.net/npm/vue@3.0.2/dist/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://cn.vuejs.org/guide/best-practices/production-deployment.html#without-build-tools",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>Vue3 各构建版本：</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230828/10.png" alt="10" tabindex="0" loading="lazy"><figcaption>10</figcaption></figure><ol><li>在浏览器端通过<code>&lt;script src=&quot;...&quot;&gt;</code>使用 Vue 的完整版本。一个文件包含全部内容</li><li>在浏览器端通过<code>&lt;script src=&quot;...&quot;&gt;</code>使用 Vue 的运行时版本。一个文件包含全部运行时内容</li><li>在浏览器端通过<code>&lt;script type=&quot;module&quot;&gt;</code>使用 Vue 的完整版本。一个文件包含全部内容</li><li>在浏览器端通过<code>&lt;script type=&quot;module&quot;&gt;</code>使用 Vue 的运行时版本。一个文件包含全部运行时内容</li><li>基于构建工具使用。内容很简短，使用了 import 导入其它模块，利用 ES6 的模块优势来做“tree-shaking”。</li><li>基于构建工具使用，只包含运行时版。内容很简短，使用了 import 导入其它模块，利用 ES6 的模块优势来做“tree-shaking”。</li><li>用于服务器端渲染</li></ol><p>文件名中带 prod 的相当于 min，表示压缩优化后的版本，用于生成环境。</p><p>文件名中带 runtime，表示运行时版本，如 vue.runtime.global.js，而 vue.global.js 表示运行时+编译器的版本。</p><p>从上面可以看出，Vue 提供了两种 ESM 构建文件（5、6）：</p><ul><li><p>为打包工具提供的 ESM（6）：为诸如 webpack 或 Rollup 等现代打包工具提供的。ESM 格式被设计为可以被静态分析，所以打包工具可以利用这一点来进行“tree-shaking”并将用不到的代码排除出最终的包。为这些打包工具提供的默认文件 (pkg.module，即 package.json 中的 module 字段) 是只有运行时的 ES Module 构建 (vue.runtime.esm-bundler.js)，即将解析 Vue 单文件组件、解析模板字符串、将模板字符串编译成为 JavaScript 渲染函数等任务交给了打包工具去处理。</p></li><li><p>为浏览器提供的 ESM （5）：用于在现代浏览器中通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 直接导入。</p></li></ul><h2 id="_1-编译器-compiler" tabindex="-1"><a class="header-anchor" href="#_1-编译器-compiler" aria-hidden="true">#</a> 1 编译器 Compiler</h2><p>用于解析模板字符串，将模板字符串编译成为 JavaScript 渲染函数，如果需要在客户端上编译模板 (即：将字符串传递给 template 选项，或者使用元素的 in-DOM HTML 作为模板挂载到元素)，你将需要编译器，因此需要完整的构建版本</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/vue@3.0.2/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“解析模板字符串”，其实就是做下面这个操作</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230828/12.png" alt="12" tabindex="0" loading="lazy"><figcaption>12</figcaption></figure><p>上述 Vue3 所有构建版本中没有单独提供只含编译器的版本。</p><h2 id="_2-运行时-runtime" tabindex="-1"><a class="header-anchor" href="#_2-运行时-runtime" aria-hidden="true">#</a> 2 运行时 Runtime</h2><p>运行时是 Vue 中除去编译器剩下的全部功能，如，ref、reactive等等。</p><p>上述 Vue3 所有构建版本中有单独提供只含运行时的版本。</p><p>使用场景：</p><ul><li>只想使用 Vue 中除去编译器剩下的某些功能，如，ref、reactive</li><li>对于使用Vue cli、Vite的项目，在打包时，会将单文件组件中的 template 编译成 JavaScript，因此使用运行时版本即可。</li></ul><h2 id="_3-编译器-运行时" tabindex="-1"><a class="header-anchor" href="#_3-编译器-运行时" aria-hidden="true">#</a> 3 编译器 + 运行时</h2><p>即完整的 Vue 构建版本</p><p>上述 Vue3 所有构建版本中有提供含编译器 + 运行时的版本。</p><p>使用场景：</p><ul><li>想在浏览器端运行一个完整的 Vue 项目</li></ul><p>运行时版本体积仅为完整版本体积的68.5%，也就是说，相比之下，运行时版本体积减少了31.5%</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230828/13.png" alt="13" tabindex="0" loading="lazy"><figcaption>13</figcaption></figure><p>为什么要将 Vue 拆分成编译器和运行时两部分？</p><p>Vue2 各构建版本：</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230828/11.png" alt="11" tabindex="0" loading="lazy"><figcaption>11</figcaption></figure>`,28),h={href:"https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[a("新建一个 node 项目，仅安装 Vue（"),n("code",null,"npm i vue@next"),a("）")],-1),f=n("figure",null,[n("img",{src:"https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230828/14.png",alt:"14",tabindex:"0",loading:"lazy"}),n("figcaption",null,"14")],-1);function b(_,E){const s=p("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[n("a",r,[a("对不同构建版本的解释"),t(s)])]),n("p",null,[n("a",d,[a("vue CDN files"),t(s)])]),n("p",null,[n("a",g,[a("不使用构建工具"),t(s)])]),n("p",null,[n("a",k,[a("构建文件指南"),t(s)])]),m,n("p",null,[a("Vue2 "),n("a",h,[a("对不同构建版本的解释"),t(s)])]),v,f])}const y=e(c,[["render",b],["__file","differences-between-different-build-versions.html.vue"]]);export{y as default};
