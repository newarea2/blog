import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as t,c as a,b as e,d as o,f as p,a as n}from"./app-90f462c1.js";const r={},l=n('<h1 id="decodeuri、decodeuricomponent-区别" tabindex="-1"><a class="header-anchor" href="#decodeuri、decodeuricomponent-区别" aria-hidden="true">#</a> decodeURI、decodeURIComponent 区别</h1><p><code>encodeURIComponent()</code> 与 <code>encodeURI()</code> 相比，会编码更多的字符。</p><p>encodeURI/decodeURI</p><ul><li><code>encodeURI()</code> 通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码</li><li><code>decodeURI()</code> 解码由 <code>encodeURI</code> 创建或其它流程得到的统一资源标识符（URI）</li></ul><p><code>encodeURI</code> 会替换所有的字符，但不包括以下字符，即使它们具有适当的 UTF-8 转义序列：</p><table><thead><tr><th>类型</th><th>包含</th></tr></thead><tbody><tr><td>保留字符</td><td><code>;</code> <code>,</code> <code>/</code> <code>?</code> <code>:</code> <code>@</code> <code>&amp;</code> <code>=</code> <code>+</code> <code>$</code></td></tr><tr><td>非转义的字符</td><td>字母 数字 <code>-</code> <code>_</code> <code>.</code> <code>!</code> <code>~</code> <code>*</code> <code>&#39;</code> <code>(</code> <code>)</code></td></tr><tr><td>数字符号</td><td><code>#</code></td></tr></tbody></table>',6),i=e("code",null,"encodeURI",-1),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"encodeURIComponent",-1),k=n(`<p>例如，现在需要调用后台 GET 请求 <code>http://www.xxx.com</code>，并传入参数 <code>country</code>（<code>中国#cn</code>），如果使用 <code>encodeURI</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://www.xxx.com?country=&#39;</span> <span class="token operator">+</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;中国#cn&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token comment">// http://www.xxx.com?country=%E4%B8%AD%E5%9B%BD#cn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>后端获取到的 <code>country</code> 为 <code>%E4%B8%AD%E5%9B%BD</code>，经解码得到的是 <code>中国</code>，显然不是要传的 <code>中国#cn</code>。使用 <code>encodeURIComponent</code> 即可解决该问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://www.xxx.com?country=&#39;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&#39;中国#cn&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token comment">// http://www.xxx.com?country=%E4%B8%AD%E5%9B%BD%23cn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function h(_,v){const c=s("ExternalLinkIcon");return t(),a("div",null,[l,e("p",null,[o("请注意，"),i,o(' 自身_无法_产生能适用于 HTTP GET 或 POST 请求的 URI，例如对于 XMLHTTPRequests，因为 "&", "+", 和 "=" 不会被编码，然而在 GET 和 POST 请求中它们是特殊字符。然而 '),e("a",u,[m,p(c)]),o(" 这个方法会对这些字符编码。")]),k])}const U=d(r,[["render",h],["__file","decodeURI-decodeURIComponent.html.vue"]]);export{U as default};
