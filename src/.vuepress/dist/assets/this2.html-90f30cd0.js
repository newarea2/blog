import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-f1b20077.js";const t={},p=e(`<h1 id="类方法中的-this-指向问题" tabindex="-1"><a class="header-anchor" href="#类方法中的-this-指向问题" aria-hidden="true">#</a> 类方法中的 this 指向问题</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>
  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Callback&#39;</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Callback</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> p<span class="token punctuation">.</span>speak
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Cannot read properties of undefined (reading &#39;name&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常我们会认为方法内部的 <code>this</code> 指向调用这个方法的对象，通过 <code>Person</code> 的实例 <code>p</code> 调用 <code>speak()</code> 方法，其中的 <code>this</code> 就指向 p。后面将 <code>speak</code> 赋值给常量 <code>f</code>，按理说 <code>f()</code> 方法被调用时应该输出 <code>window</code> 对象的信息，但这里却是 <code>undefined</code>。</p><p>这是因为根据 JavaScript 的语法规则，<strong>所有在类中定义的方法都默认开启局部严格模式</strong>。<strong>在严格模式下，函数中的 <code>this</code> 等于 <code>undefined</code></strong>。如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出 window 对象信息</span>

<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出 undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考:</p><p><a href="JavaScript%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E5%87%A0%E7%A7%8D%E6%8C%87%E5%90%91%E8%AF%A6%E8%A7%A3">JavaScript严格模式下关于this的几种指向详解</a></p>`,7),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","this2.html.vue"]]);export{r as default};
