import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-90f462c1.js";const p={},e=t(`<h2 id="html、xml、txt、log等文件、图片" tabindex="-1"><a class="header-anchor" href="#html、xml、txt、log等文件、图片" aria-hidden="true">#</a> html、xml、txt、log等文件、图片</h2><p>浏览器会直接打开/展示文件</p><p>访问静态文件服务器</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230831/08.png" alt="08" tabindex="0" loading="lazy"><figcaption>08</figcaption></figure><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230831/09.png" alt="09" tabindex="0" loading="lazy"><figcaption>09</figcaption></figure><p>将文件拖动到浏览器</p><p>如何下载</p><p>通过 <code>&lt;a&gt;&lt;/a&gt;</code></p><p>通过 file-read</p><h2 id="二进制文件" tabindex="-1"><a class="header-anchor" href="#二进制文件" aria-hidden="true">#</a> 二进制文件</h2><p>zip 压缩包、word、excel、jar包</p><p>会直接下载</p><p>访问静态文件服务器</p><figure><img src="https://blog-1320825986.cos.ap-nanjing.myqcloud.com/20230831/07.png" alt="07" tabindex="0" loading="lazy"><figcaption>07</figcaption></figure><p>将文件拖动到浏览器</p><p>通过流的方式下载，前端如何写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-disposition&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">attachment; filename=&quot;test-download.png&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/octet-stream&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// pipe generated file to the response</span>
fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;test-download.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="导出" tabindex="-1"><a class="header-anchor" href="#导出" aria-hidden="true">#</a> 导出</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> servePath <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span> <span class="token comment">// 接口公共前缀</span>
<span class="token keyword">function</span> <span class="token function">exportExcel</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 导出</span>
    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">token</span><span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>exportConditionData
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token function-variable function">createUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> param</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            query <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>param<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> newUrl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">+</span> query<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> newUrl<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token function">createUrl</span><span class="token punctuation">(</span>servePath <span class="token operator">+</span> <span class="token string">&#39;api&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出功能逻辑主要由后端实现，前端拼接好url即可</p>`,20),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","basic.html.vue"]]);export{k as default};
