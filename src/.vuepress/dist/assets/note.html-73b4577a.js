import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as a,c as r,a as t,b as e,f as d,d as m}from"./app-72775176.js";const s={},h=t("h1",{id:"note",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#note","aria-hidden":"true"},"#"),e(" note")],-1),l={href:"https://juejin.cn/post/6947200436101185566",target:"_blank",rel:"noopener noreferrer"},c=m('<p>将代码提交到仓库前，既需要对代码进行 ESLint 检查，也要检查 commit 信息的格式是否规范。（先检查代码，再检查commit 信息）</p><ul><li>在 git 操作中设置一些 hooks，需要 husky。</li><li>对代码进行 ESLint 检查，需要 ESLint、lint-staged</li><li>检查 commit 信息，需要 commitlint</li></ul><h2 id="commitzen" tabindex="-1"><a class="header-anchor" href="#commitzen" aria-hidden="true">#</a> Commitzen</h2><p>| 工具 | 描述 |<br> | ---- | --- | --- |<br> | Commitzen | 使用 Commitizen 后，控制台出现交互式的会话，提示填写必要的提交字段。 |</p><p>方便人们写出符合规范的 commit 信息，该工具运行在 commitlint 之前。</p><h2 id="lint-工具" tabindex="-1"><a class="header-anchor" href="#lint-工具" aria-hidden="true">#</a> lint 工具</h2><table><thead><tr><th>工具</th><th>描述</th><th>WebStorm 支持</th></tr></thead><tbody><tr><td>ESLint</td><td>检查代码是否符合规范</td><td>默认支持 Languages &amp; Frameworks - Code Quality Tools - ESLint</td></tr><tr><td>stylelint</td><td>检查样式是否符合规范</td><td>默认支持 Languages &amp; Frameworks - Style Sheets - Stylelint</td></tr><tr><td>commitlint</td><td>检查 commit 信息是否符合规范</td><td>安装插件 Commitlint Conventional Commit</td></tr></tbody></table><p>上面3个工具的共同点是当代码、样式、commit 消息已经写完后，对代码、样式、commit 消息进行校验，再控制台输出检查结果，同时可以修复错误或者警告。</p><p>都可以通过配置文件对校验行为进行配置。</p><h2 id="git-hooks" tabindex="-1"><a class="header-anchor" href="#git-hooks" aria-hidden="true">#</a> git hooks</h2><p>| 工具 | 描述 |<br> | ---- | --- | --- |<br> | husky | 我们向项目中方便添加 git hooks |<br> | yorkie | 基于husky，由尤大编写 |</p><p>lint 工具可以整合 husky，在代码提交之前校验代码、样式、commit 消息，而不需要手动的执行各 lint 命令。</p>',12);function p(u,_){const o=n("ExternalLinkIcon");return a(),r("div",null,[h,t("p",null,[t("a",l,[e("GitHook 工具 —— husky（格式化代码）"),d(o)])]),c])}const f=i(s,[["render",p],["__file","note.html.vue"]]);export{f as default};
